{"version":3,"sources":["Components/contactList/ContactList.module.css","redux/contacts/contacts-selectors.js","Components/contactForm/ContactForm.js","Components/contactList/ContactList.js","Components/filter/Filter.js","pages/PhonePage.js","Components/contactForm/ContactForm.module.css"],"names":["module","exports","contactsErrorSelector","state","contacts","error","contactsIsLoadingSelector","isLoading","contactsContactsgSelector","items","contactsFilterSelector","filter","getWisibileContacts","createSelector","contact","name","toLowerCase","includes","initialState","number","ContactForm","useSelector","form","setForm","useState","dispatch","useDispatch","onHandleChenge","e","setError","value","target","prev","_objectSpread","isContactExist","some","reset","_jsxs","_Fragment","children","onSubmit","preventDefault","addContactsOperation","_jsx","placeholder","className","s","nameinput","type","pattern","title","required","onChange","btncon","disabled","ContactList","contactsList","menu","map","btn","id","onClick","removeContactOperation","Filter","setFilter","PhonePage"],"mappings":"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","file":"static/js/PhonesPage.5f7a60f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__Eh_IF\",\"menu\":\"ContactList_menu__1RznB\",\"list\":\"ContactList_list__2Cj3M\"};","import { createSelector } from \"reselect\";\nconst contactsErrorSelector = (state) => state.contacts.error;\nconst contactsIsLoadingSelector = (state) => state.contacts.isLoading;\nconst contactsContactsgSelector = (state) => state.contacts.items;\nconst contactsFilterSelector = (state) => state.contacts.filter;\n\nexport const getWisibileContacts = createSelector(\n  [contactsContactsgSelector, contactsFilterSelector],\n  (contacts, filter) =>\n    contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n\nexport {\n  contactsErrorSelector,\n  contactsIsLoadingSelector,\n  contactsContactsgSelector,\n  contactsFilterSelector,\n};\n","import { useState } from \"react\";\nimport s from \"./ContactForm.module.css\";\n// import PropTypes from \"prop-types\";\n// import axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\n// import { addNewContact } from \"../../redux/contacts/actions\";\nimport { useSelector } from \"react-redux\";\nimport { addContactsOperation } from \"../../redux/contacts/contactsOperations\";\nimport { setError } from \"../../redux/contacts/actions\";\nimport {\n  contactsContactsgSelector,\n  contactsErrorSelector,\n} from \"../../redux/contacts/contacts-selectors\";\nconst initialState = { name: \"\", number: \"\" };\n\nexport default function ContactForm() {\n  const error = useSelector(contactsErrorSelector);\n  const contacts = useSelector(contactsContactsgSelector);\n  const [form, setForm] = useState(initialState);\n  const dispatch = useDispatch();\n  const onHandleChenge = (e) => {\n    if (error) dispatch(setError(\"\"));\n    const { name, value } = e.target;\n    setForm((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const isContactExist = () =>\n    contacts.some(\n      (contact) => contact.name.toLowerCase() === form.name.toLowerCase()\n    );\n\n  const onHandleSubmit = (e) => {\n    e.preventDefault();\n    !isContactExist() && dispatch(addContactsOperation({ ...form }));\n    // !isContactExist()\n    //   ? dispatch(addNewContact({ ...form }))\n    //   : alert(`Сontact ${form.name.toUpperCase()} already exists`);\n    reset();\n  };\n\n  const reset = () => {\n    setForm((prev) => ({ ...prev, name: \"\", number: \"\" }));\n  };\n\n  return (\n    <>\n      <form onSubmit={onHandleSubmit}>\n        <label>\n          Name:\n          <input\n            placeholder=\"Enter name\"\n            className={s.nameinput}\n            value={form.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={onHandleChenge}\n          />\n        </label>\n\n        <label>\n          Number:\n          <input\n            placeholder=\"Enter number\"\n            className={s.nameinput}\n            value={form.number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={onHandleChenge}\n          />\n        </label>\n        <button className={s.btncon} type=\"submit\" disabled={isContactExist()}>\n          Add contact\n        </button>\n      </form>\n      {isContactExist() && <span>Сontact already exists</span>}\n    </>\n  );\n}\n\n// ContactForm.propTypes = {\n//   name: PropTypes.string,\n//   number: PropTypes.number,\n// };\n","import React from \"react\";\nimport s from \"./ContactList.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { removeContactOperation } from \"../../redux/contacts/contactsOperations\";\nimport {\n  contactsErrorSelector,\n  contactsIsLoadingSelector,\n  getWisibileContacts,\n} from \"../../redux/contacts/contacts-selectors\";\n\nconst ContactList = () => {\n  const error = useSelector(contactsErrorSelector);\n  const isLoading = useSelector(contactsIsLoadingSelector);\n  const contactsList = useSelector(getWisibileContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.menu}>\n      {isLoading && <h2>...loading</h2>}\n      {error && <h2>{error}</h2>}\n\n      {contactsList &&\n        contactsList.map((contact) => (\n          <li key={contact.id}>\n            <span>{contact.name}: </span>\n            <span>{contact.number}</span>\n            <button\n              className={s.btn}\n              type=\"button\"\n              id={contact.id}\n              onClick={() => dispatch(removeContactOperation(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\n// import s from \"./Filter.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/actions\";\nimport { contactsFilterSelector } from \"../../redux/contacts/contacts-selectors\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsFilterSelector);\n  return (\n    <label className=\"\">\n      Find contacs by name:\n      <input\n        placeholder=\"Enter name\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(setFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport ContactForm from \"../Components/contactForm/ContactForm\";\nimport ContactList from \"../Components/contactList/ContactList\";\nimport Filter from \"../Components/filter/Filter\";\n// import App from \"../Components/App\";\nconst PhonePage = () => {\n  // return <App />;\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default PhonePage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"namelist\":\"ContactForm_namelist__3ijbg\",\"nameinput\":\"ContactForm_nameinput__13qKu\",\"btncon\":\"ContactForm_btncon__EKSA2\"};"],"sourceRoot":""}