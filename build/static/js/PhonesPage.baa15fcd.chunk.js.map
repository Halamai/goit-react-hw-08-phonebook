{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Components/contactForm/ContactForm.module.css","Components/contactList/ContactList.module.css","redux/contacts/contacts-selectors.js","Components/contactForm/ContactForm.js","Components/contactList/ContactList.js","Components/filter/Filter.js","pages/PhonePage.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","contactsErrorSelector","state","contacts","error","contactsIsLoadingSelector","isLoading","contactsContactsgSelector","items","contactsFilterSelector","filter","getWisibileContacts","createSelector","contact","name","toLowerCase","includes","initialState","number","ContactForm","useSelector","useState","form","setForm","dispatch","useDispatch","onHandleChenge","e","setError","target","prev","isContactExist","some","reset","onSubmit","preventDefault","addContactsOperation","placeholder","className","s","nameinput","type","pattern","title","required","onChange","btncon","disabled","ContactList","contactsList","menu","map","btn","id","onClick","removeContactOperation","Filter","setFilter","PhonePage"],"mappings":"6LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,mBIJtGC,EAAOC,QAAU,CAAC,SAAW,8BAA8B,UAAY,+BAA+B,OAAS,8B,mBCA/GD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,KAAO,0BAA0B,KAAO,4B,yHCAnFC,EAAwB,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAClDC,EAA4B,SAACH,GAAD,OAAWA,EAAMC,SAASG,WACtDC,EAA4B,SAACL,GAAD,OAAWA,EAAMC,SAASK,OACtDC,EAAyB,SAACP,GAAD,OAAWA,EAAMC,SAASO,QAE5CC,EAAsBC,YACjC,CAACL,EAA2BE,IAC5B,SAACN,EAAUO,GAAX,OACEP,EAASO,QAAO,SAACG,GAAD,OACdA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,qB,OCG3CE,EAAe,CAAEH,KAAM,GAAII,OAAQ,IAE1B,SAASC,IACtB,IAAMf,EAAQgB,YAAYnB,GACpBE,EAAWiB,YAAYb,GAC7B,EAAwBc,mBAASJ,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAWC,cACXC,EAAiB,SAACC,GAClBvB,GAAOoB,EAASI,YAAS,KAC7B,MAAwBD,EAAEE,OAAlBf,EAAR,EAAQA,KAAMpB,EAAd,EAAcA,MACd6B,GAAQ,SAACO,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBhB,EAAOpB,QAGlCqC,EAAiB,kBACrB5B,EAAS6B,MACP,SAACnB,GAAD,OAAaA,EAAQC,KAAKC,gBAAkBO,EAAKR,KAAKC,kBAYpDkB,EAAQ,WACZV,GAAQ,SAACO,GAAD,mBAAC,eAAeA,GAAhB,IAAsBhB,KAAM,GAAII,OAAQ,SAGlD,OACE,qCACE,uBAAMgB,SAfa,SAACP,GACtBA,EAAEQ,kBACDJ,KAAoBP,EAASY,YAAqB,eAAKd,KAIxDW,KASE,UACE,0CAEE,uBACEI,YAAY,aACZC,UAAWC,IAAEC,UACb9C,MAAO4B,EAAKR,KACZ2B,KAAK,OACL3B,KAAK,OACL4B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUnB,OAId,4CAEE,uBACEW,YAAY,eACZC,UAAWC,IAAEC,UACb9C,MAAO4B,EAAKJ,OACZuB,KAAK,MACL3B,KAAK,SACL4B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUnB,OAGd,wBAAQY,UAAWC,IAAEO,OAAQL,KAAK,SAASM,SAAUhB,IAArD,4BAIDA,KAAoB,kE,qBCxCZiB,EA9BK,WAClB,IAAM5C,EAAQgB,YAAYnB,GACpBK,EAAYc,YAAYf,GACxB4C,EAAe7B,YAAYT,GAC3Ba,EAAWC,cAEjB,OACE,qBAAIa,UAAWC,IAAEW,KAAjB,UACG5C,GAAa,4CACbF,GAAS,6BAAKA,IAEd6C,GACCA,EAAaE,KAAI,SAACtC,GAAD,OACf,+BACE,iCAAOA,EAAQC,KAAf,QACA,+BAAOD,EAAQK,SACf,wBACEoB,UAAWC,IAAEa,IACbX,KAAK,SACLY,GAAIxC,EAAQwC,GACZC,QAAS,kBAAM9B,EAAS+B,YAAuB1C,EAAQwC,MAJzD,sBAHOxC,EAAQwC,WCCZG,EAjBA,WACb,IAAMhC,EAAWC,cACXf,EAASU,YAAYX,GAC3B,OACE,wBAAO6B,UAAU,GAAjB,kCAEE,uBACED,YAAY,aACZI,KAAK,OACL3B,KAAK,SACLpB,MAAOgB,EACPmC,SAAU,SAAClB,GAAD,OAAOH,EAASiC,YAAU9B,EAAEE,OAAOnC,eCAtCgE,UAbG,WAEhB,OACE,qCACE,2CACA,cAACvC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/PhonesPage.baa15fcd.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"namelist\":\"ContactForm_namelist__OYijJ\",\"nameinput\":\"ContactForm_nameinput__3SmRz\",\"btncon\":\"ContactForm_btncon__2eZ7b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__2YaC0\",\"menu\":\"ContactList_menu__3WBVG\",\"list\":\"ContactList_list__3Ls8I\"};","import { createSelector } from \"reselect\";\r\nconst contactsErrorSelector = (state) => state.contacts.error;\r\nconst contactsIsLoadingSelector = (state) => state.contacts.isLoading;\r\nconst contactsContactsgSelector = (state) => state.contacts.items;\r\nconst contactsFilterSelector = (state) => state.contacts.filter;\r\n\r\nexport const getWisibileContacts = createSelector(\r\n  [contactsContactsgSelector, contactsFilterSelector],\r\n  (contacts, filter) =>\r\n    contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n\r\nexport {\r\n  contactsErrorSelector,\r\n  contactsIsLoadingSelector,\r\n  contactsContactsgSelector,\r\n  contactsFilterSelector,\r\n};\r\n","import { useState } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\n// import PropTypes from \"prop-types\";\r\n// import axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\n// import { addNewContact } from \"../../redux/contacts/actions\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { addContactsOperation } from \"../../redux/contacts/contactsOperations\";\r\nimport { setError } from \"../../redux/contacts/actions\";\r\nimport {\r\n  contactsContactsgSelector,\r\n  contactsErrorSelector,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\nconst initialState = { name: \"\", number: \"\" };\r\n\r\nexport default function ContactForm() {\r\n  const error = useSelector(contactsErrorSelector);\r\n  const contacts = useSelector(contactsContactsgSelector);\r\n  const [form, setForm] = useState(initialState);\r\n  const dispatch = useDispatch();\r\n  const onHandleChenge = (e) => {\r\n    if (error) dispatch(setError(\"\"));\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const isContactExist = () =>\r\n    contacts.some(\r\n      (contact) => contact.name.toLowerCase() === form.name.toLowerCase()\r\n    );\r\n\r\n  const onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    !isContactExist() && dispatch(addContactsOperation({ ...form }));\r\n    // !isContactExist()\r\n    //   ? dispatch(addNewContact({ ...form }))\r\n    //   : alert(`Сontact ${form.name.toUpperCase()} already exists`);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setForm((prev) => ({ ...prev, name: \"\", number: \"\" }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onHandleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            placeholder=\"Enter name\"\r\n            className={s.nameinput}\r\n            value={form.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number:\r\n          <input\r\n            placeholder=\"Enter number\"\r\n            className={s.nameinput}\r\n            value={form.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n        <button className={s.btncon} type=\"submit\" disabled={isContactExist()}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n      {isContactExist() && <span>Сontact already exists</span>}\r\n    </>\r\n  );\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   name: PropTypes.string,\r\n//   number: PropTypes.number,\r\n// };\r\n","import React from \"react\";\r\nimport s from \"./ContactList.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { removeContactOperation } from \"../../redux/contacts/contactsOperations\";\r\nimport {\r\n  contactsErrorSelector,\r\n  contactsIsLoadingSelector,\r\n  getWisibileContacts,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst ContactList = () => {\r\n  const error = useSelector(contactsErrorSelector);\r\n  const isLoading = useSelector(contactsIsLoadingSelector);\r\n  const contactsList = useSelector(getWisibileContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.menu}>\r\n      {isLoading && <h2>...loading</h2>}\r\n      {error && <h2>{error}</h2>}\r\n\r\n      {contactsList &&\r\n        contactsList.map((contact) => (\r\n          <li key={contact.id}>\r\n            <span>{contact.name}: </span>\r\n            <span>{contact.number}</span>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              id={contact.id}\r\n              onClick={() => dispatch(removeContactOperation(contact.id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\n// import s from \"./Filter.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/actions\";\r\nimport { contactsFilterSelector } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(contactsFilterSelector);\r\n  return (\r\n    <label className=\"\">\r\n      Find contacs by name:\r\n      <input\r\n        placeholder=\"Enter name\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(e) => dispatch(setFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport ContactForm from \"../Components/contactForm/ContactForm\";\r\nimport ContactList from \"../Components/contactList/ContactList\";\r\nimport Filter from \"../Components/filter/Filter\";\r\n// import App from \"../Components/App\";\r\nconst PhonePage = () => {\r\n  // return <App />;\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PhonePage;\r\n"],"sourceRoot":""}